// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?
  phone   String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       UserImage?
  password    Password?

  favorites   Vendor[] @relation("UserFavorites")
  
  vendor     Vendor? 
  reviews    Review[]
  bookings   Booking[]

  roles       Role[]
  sessions    Session[]
  connections Connection[]
  passkey     Passkey[]
}

model Vendor {
  id         String   @id @default(cuid())

  businessName String
  slug       String @unique
  description String?

  division  String

  thana     String
  district  String
  address   String?
  
  mapUrl    String?
  latitude  Float?
  longitude Float?
  
  phone String?
  website String?
  socialLinks Json?
  
  rating Float @default(0)
  reviews Review[]
  

  gallery VendorImage[]
  packages Package[]
  
  isFeatured Boolean @default(false)
  
  bookings Booking[]

  favorites User[] @relation("UserFavorites")

  awards VendorAward[] 

  venueDetails VenueDetails?
  photographerDetails PhotographerDetails?
  catererDetails CatererDetails?

  owner     User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId   String @unique

  vendorType VendorType @relation(fields: [vendorTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vendorTypeId String 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId, vendorTypeId, isFeatured, rating, businessName])
}

model VendorAward {
  id          String    @id @default(cuid())
  name        String
  year        Int
  vendor     Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vendorId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model VendorType {
  id          String    @id @default(cuid())
  slug        String    @unique
  name        String    @unique // "Venue", "Photographer", "Caterer", etc.
  description String?
  vendors     Vendor[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


model VendorImage {
  id        String  @id @default(cuid())
  altText   String?
  objectKey String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vendor   Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vendorId String

  // non-unique foreign key
  @@index([vendorId])
}


model Package {
  id         String   @id @default(cuid())
  title      String
  description String
  price      Int      // Store in BDT

  vendorId   String
  vendor     Vendor   @relation(fields: [vendorId], references: [id])
  bookings   Booking[]
}

model Booking {
  id         String   @id @default(cuid())
  vendorId   String
  userId     String
  packageId  String?
  date       DateTime
  status     String @default("pending")
  message    String?
  totalPrice Int // Store in BDT

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  package Package? @relation(fields: [packageId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  items BookingItem[]
  // non-unique foreign keys
  @@index([vendorId, userId])
}

model BookingItem {
  id         String   @id @default(cuid())
  bookingId  String
  serviceId  String?   
  name       String    
  price      Int       
  
  booking    Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
}

model Review {
  id         String   @id @default(cuid())
  vendorId   String
  userId     String

  rating     Int      // 1 to 5 scale
  comment    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // non-unique foreign keys
  @@index([vendorId, userId])
}



model UserImage {
  id        String  @id @default(cuid())
  altText   String?
  objectKey String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model Passkey {
  id             String   @id
  aaguid         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  publicKey      Bytes
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  webauthnUserId String
  counter        BigInt
  deviceType     String // 'singleDevice' or 'multiDevice'
  backedUp       Boolean
  transports     String? // Stored as comma-separated values

  @@index(userId)
}



// ======================
// Venue-specific models
// ======================

model VenueDetails {
  id                String      @id @default(cuid())
  vendor            Vendor      @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId          String      @unique
  

  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  venueType         VenueType @relation(fields: [venueTypeId], references: [id], onDelete: Cascade)
  venueTypeId       String
  
  // Relations to other venue-specific models

  spaces         VenueSpace[]

  amenities        VenueAmenity[]
  eventTypes       VenueEventType[]
  availability     VenueAvailability[]
  services         VenueService[]
}


model GlobalVenueSpace {
  id          String   @id @default(cuid())
  name        String   @unique 

  venueSpaces VenueSpace[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GlobalVenueService {
  id          String   @id @default(cuid())
  name        String   @unique 

  venueServices VenueService[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GlobalVenueAmenity {
  id          String   @id @default(cuid())
  name        String   @unique 

  venueAmenities VenueAmenity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GlobalVenueEventType {
  id          String   @id @default(cuid())
  name        String   @unique 

  venueEventTypes VenueEventType[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model VenueSpace {
  id               String             @id @default(cuid())
  price            Float?  
  description String?  
  sittingCapacity  Int
  standingCapacity Int
  parkingCapacity  Int?
  // Add other fields if needed, e.g., capacity Float?, sqFt Int?

  venue            VenueDetails       @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId          String

  globalSpace      GlobalVenueSpace   @relation(fields: [globalSpaceId], references: [id], onDelete: Cascade)
  globalSpaceId    String

  @@unique([venueId, globalSpaceId]) 
  @@index([venueId])
}

model VenueService {
  id               String             @id @default(cuid())
  price            Float?  
  description String?  

  venue            VenueDetails       @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId          String

  globalService    GlobalVenueService @relation(fields: [globalServiceId], references: [id], onDelete: Cascade)
  globalServiceId  String

  @@unique([venueId, globalServiceId]) 
  @@index([venueId])
}

model VenueAmenity {
  id               String             @id @default(cuid())

  venue            VenueDetails       @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId          String

  globalAmenity    GlobalVenueAmenity @relation(fields: [globalAmenityId], references: [id], onDelete: Cascade)
  globalAmenityId  String

  @@unique([venueId, globalAmenityId]) 
  @@index([venueId])
}



model VenueType {
  id          String    @id @default(cuid())
  name        String     // "Ballroom", "Garden", "Hotel", etc.
  venues      VenueDetails[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  @@unique([name])
}


model VenueEventType {
  id         String    @id @default(cuid())

  venue      VenueDetails @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId    String

  globalEventType GlobalVenueEventType @relation(fields: [globalEventTypeId], references: [id], onDelete: Cascade)
  globalEventTypeId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([venueId, globalEventTypeId])
  @@index([venueId])
}


model VenueAvailability {
  id          String    @id @default(cuid())
  date        DateTime
  available   Boolean   @default(true)
  venue       VenueDetails @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// ======================
// Photographer-specific models
// ======================
model PhotographerDetails {
  id                String      @id @default(cuid())
  vendor            Vendor      @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId          String      @unique
  minPrice          Float?
  maxPrice          Float?
  additionalFee     Boolean?
  additionalFeeRate Float?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations to other photography-specific models
  styles           PhotographyStyle[]
  services         PhotographyService[]
  servedCities     PhotographerServedCity[]

  additionalInfo String? // Any additional information about the photographer
}

model PhotographerServedCity {
  id          String      @id @default(cuid())
  city        String
  photographer PhotographerDetails @relation(fields: [photographerId], references: [id], onDelete: Cascade)
  photographerId String
  isBaseCity  Boolean     @default(false) // Whether this is their base city
  hasAdditionalFee Boolean @default(false) // Whether serving this city incurs additional fee
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([photographerId])
}

model PhotographyStyle {
  id          String    @id @default(cuid())
  name        String    @unique // "Classic", "Editorial", "Fine Art", etc.
  photographers PhotographerDetails[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PhotographyService {
  id          String    @id @default(cuid())
  name        String    @unique // "Bride-only session", "Drone photography", etc.
  photographers PhotographerDetails[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


// ======================
// Caterer-specific models
// ======================


model CatererDetails {
  id                String      @id @default(cuid())
  vendor            Vendor      @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId          String      @unique
  minPricePerPerson Float?
  maxPricePerPerson Float?
  additionalFee     Boolean?
  additionalFeeRate Float?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations to other caterer-specific models
  mealServices     CatererMealService[]
  cuisines         CatererCuisine[]
  dietaryOptions   CatererDietaryOption[]
  beverageServices CatererBeverageService[]
  menuItems        CatererMenuItem[]
  catererServedCities CatererServedCity[]
}

model CatererServedCity {
  id          String      @id @default(cuid())
  city        String
  caterer    CatererDetails @relation(fields: [catererId], references: [id], onDelete: Cascade)
  catererId   String
  isBaseCity  Boolean     @default(false) // Whether this is their base city
  hasAdditionalFee Boolean @default(false) // Whether serving this city incurs additional fee
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([catererId])
}

model CatererMealService {
  id          String    @id @default(cuid())
  name        String    @unique // "Buffet", "Plated", "Family Style", etc.
  caterers    CatererDetails[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CatererCuisine {
  id          String    @id @default(cuid())
  name        String    @unique // "Italian", "Indian", "Mexican", etc.
  caterers    CatererDetails[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CatererDietaryOption {
  id          String    @id @default(cuid())
  name        String    @unique // "Vegetarian", "Vegan", "Gluten-Free", etc.
  caterers    CatererDetails[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CatererBeverageService {
  id          String    @id @default(cuid())
  name        String    @unique // "Full Bar", "Beer & Wine Only", etc.
  caterers    CatererDetails[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CatererMenuItem {
  id          String    @id @default(cuid())
  name        String
  description String?
  price       Float?
  category    String?   // "Appetizer", "Main Course", "Dessert", etc.
  caterer     CatererDetails @relation(fields: [catererId], references: [id], onDelete: Cascade)
  catererId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
